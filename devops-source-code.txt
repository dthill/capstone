#!/bin/bash
echo Installing Docker

sudo apt-get --yes remove docker docker.io containerd runc
sudo apt-get --yes update
sudo apt-get --yes install \
    ca-certificates \
    curl \
    gnupg \
    lsb-release


sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
sudo chmod a+r /etc/apt/keyrings/docker.gpg

echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo tee \
  /usr/share/keyrings/jenkins-keyring.asc > /dev/null
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null

sudo apt-get --yes update
sudo apt-get --yes install docker-ce docker-ce-cli containerd.io docker-compose-plugin
sudo groupadd docker
sudo usermod -a -G docker $USER
sudo apt-get --yes install openjdk-11-jre
sudo apt-get --yes install jenkins
sudo usermod -a -G docker jenkins

sudo service docker start
sudo reboot


version: '3.8'
services:

  db:
    image: mysql:8.0
    restart: always
    environment:
      - MYSQL_DATABASE=ecommerce
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
    volumes:
      - db:/var/lib/mysql

  backend:
    restart: always
    depends_on:
      - db
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DB_PASSWORD=${DB_PASSWORD}

  frontend:
    restart: always
    depends_on:
      - backend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - '80:80'

  selenium:
    image: selenium/standalone-chrome
    restart: always
    shm_size: 2gb
    ports:
      - '4444:4444'

volumes:
  db:
    driver: local

:80 {
        encode gzip

        handle /api/* {
                reverse_proxy backend:8080
        }

        handle {
                root * /usr/share/caddy
                try_files {path} /index.html
                file_server
        }
}


FROM cypress/browsers:node16.17.1-chrome105-ff104-edge as builder

ARG PORT=80
ENV PORT ${PORT}

WORKDIR /workspace

COPY . .

RUN npm ci
RUN cd /workspace && \
    npm run test:ci && \
    npm run build

FROM caddy:2.6.2

WORKDIR /usr/share/caddy

RUN rm -rf /usr/share/caddy/**

COPY --from=builder /workspace/dist/frontend /usr/share/caddy

COPY --from=builder /workspace/Caddyfile /etc/caddy/Caddyfile

EXPOSE ${PORT}




FROM openjdk:20-jdk-bullseye

WORKDIR /app
RUN apt-get update && apt-get install dos2unix
COPY . .

RUN find . -type f -print0 | xargs -0 dos2unix
RUN chmod 777 mvnw

RUN ["./mvnw", "package"]

CMD ["java", "-jar", "-Dspring.profiles.active=prod", "target/backend-0.0.1-SNAPSHOT.jar"]


pipeline {
    agent any
    triggers {
        pollSCM('0 8 * * 7')
    }
    environment {
        DB_PASSWORD = credentials('MEDICARE_DB_PASSWORD')
    }
    stages {
        stage('Build') {
            steps {
                git url: 'https://github.com/dthill/capstone.git', branch: 'main'
                sh "docker compose build"
            }
        }
        stage('Deploy') {
            steps {
                sh 'docker compose up -d'
            }
        }
        stage('e2e Test') {
            steps {
                sleep 40
                sh 'cd e2e-tests && ./mvnw test'
            }
        }
    }
}